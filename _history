{"entries":[{"timestamp":1731331346515,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"h*S5QO,Y]_l*cc!qLMX8\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"|J3Q0y6-qKNd$LE29tC4\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//  Programm name:    zip64-car-steuerung\n//  Car Steuerung Sender mit Rotation\n//  V1 von car-steuerung-py kopiert   11.11.2024\n//  LED Anzeigen:\n//  Remote    0,0\n//  Speed     2,0 - 2,4\n//  richtung  0,2 - 0,4\n//  licht     4,4\n//  on        4,0\n//  Buttons\n//  =====================================\n//  A: on/off, on: LED 4,0\ninput.onButtonPressed(Button.A, function on_button_pressed_a() {\n    \n    if (fahren == 0) {\n        fahren = 1\n        set_led_fahren(1)\n        // led.plot(0, 0)\n        music.play(music.tonePlayable(262, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n    } else {\n        fahren = 0\n        speed = 0\n        richtung = 0\n        trigger = 1\n        sendData()\n        set_led_fahren(0)\n        //  led.unplot(0, 0)\n        music.play(music.createSoundExpression(WaveShape.Square, 1600, 1, 255, 0, 1000, SoundExpressionEffect.None, InterpolationCurve.Curve), music.PlaybackMode.UntilDone)\n    }\n    \n    radio.sendValue(\"fahren\", fahren)\n})\n//  B: Licht on/off, on: LED xy44\ninput.onButtonPressed(Button.B, function on_button_pressed_b() {\n    \n    if (licht_on == 0) {\n        licht_on = 1\n        set_led_licht(1)\n    } else {\n        //  led.plot(4, 0)\n        licht_on = 0\n        sendData()\n        set_led_licht(0)\n    }\n    \n    // led.unplot(4, 0)\n    radio.sendValue(\"licht_on\", licht_on)\n})\n//  Funktionen\n//  ===================================\n//  Leds ein/aus\n//  -------------------\n//  remotControl\nfunction set_led_remote(on: number) {\n    let pos = [0, 0]\n    if (on) {\n        led.plot(pos[0], pos[1])\n    } else {\n        led.unplot(pos[0], pos[1])\n    }\n    \n}\n\n//  fahren\nfunction set_led_fahren(on: number) {\n    let pos = [4, 0]\n    if (on) {\n        led.plot(pos[0], pos[1])\n    } else {\n        led.unplot(pos[0], pos[1])\n    }\n    \n}\n\n//  stop\nfunction set_led_stop(on: number) {\n    let pos = [2, 2]\n    if (on) {\n        led.plot(pos[0], pos[1])\n    } else {\n        led.unplot(pos[0], pos[1])\n    }\n    \n}\n\n//  licht\nfunction set_led_licht(on: number) {\n    let pos = [4, 4]\n    if (on) {\n        led.plot(pos[0], pos[1])\n    } else {\n        led.unplot(pos[0], pos[1])\n    }\n    \n}\n\n//  Daten Senden\nfunction sendData() {\n    \n    if (trigger == 1) {\n        // serial.write_value(\"speed\", speed)\n        // serial.write_value(\"richtung\", richtung)\n        radio.sendNumber(1)\n        radio.setTransmitSerialNumber(true)\n        radio.sendValue(\"speed\", speed)\n        radio.sendValue(\"richtung\", richtung)\n        radio.sendValue(\"licht_on\", licht_on)\n        trigger = 0\n    }\n    \n}\n\n//  Daten Empfangen\n// led.unplot(4, 0)\nradio.onReceivedValue(function on_received_value(name: string, value: number) {\n    \n    music.play(music.tonePlayable(Note.C, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n    serial.writeValue(\"daten empfangen: \" + name, value)\n    if (name == \"remCtrl\") {\n        remCtrl = value\n    }\n    \n    if (remCtrl) {\n        set_led_remote(1)\n    } else {\n        // led.plot(4, 0)\n        set_led_remote(0)\n    }\n    \n})\nfunction setSpeed() {\n    let speedDir: number;\n    \n    speedRoh = input.rotation(Rotation.Pitch) * -1\n    if (speedRoh > 0) {\n        speedDir = 1\n    } else {\n        speedDir = -1\n    }\n    \n    // speed = Math.constrain(abs(speedRoh) - s0, 0, 100)\n    // speed = min(100, speed / 2 * 10) * speedDir\n    speed = Math.min(100, Math.abs(speedRoh * speedFaktor)) * speedDir\n    speedAbs = Math.abs(speed)\n    if (Math.abs(speedAbs - speedOld) > hyst) {\n        trigger = 1\n        // serial.write_value(\"speedAbs\", speedAbs)\n        // serial.write_value(\"speedOld\", speedOld)\n        speedOld = speedAbs\n    }\n    \n}\n\nfunction setRichtung() {\n    let richtungDir: number;\n    \n    richtungRoh = input.rotation(Rotation.Roll)\n    if (richtungRoh > 0) {\n        richtungDir = 1\n    } else {\n        richtungDir = -1\n    }\n    \n    // richtung = Math.constrain(abs(richtungRoh) - r0, 0, 100)\n    // richtung = min(100, richtung / 2 * 10) * richtungDir\n    richtung = Math.min(100, Math.abs(richtungRoh * richtungFkt)) * richtungDir\n    richtungAbs = Math.abs(richtung)\n    if (Math.abs(richtungAbs - richtungOld) > hyst) {\n        trigger = 1\n        richtungOld = richtungAbs\n    }\n    \n}\n\nfunction showSpeed() {\n    if (speed > 0) {\n        if (speed > s2) {\n            led.plot(2, 0)\n            led.plot(2, 1)\n            led.plot(2, 2)\n        } else {\n            led.unplot(2, 0)\n            led.plot(2, 1)\n        }\n        \n    } else if (speed < 0) {\n        if (speed < -1 * s2) {\n            led.plot(2, 2)\n            led.plot(2, 3)\n            led.plot(2, 4)\n        } else {\n            led.plot(2, 3)\n            led.unplot(2, 4)\n        }\n        \n    } else if (speed == 0) {\n        led.unplot(2, 0)\n        led.unplot(2, 1)\n        led.plot(2, 2)\n        led.unplot(2, 3)\n        led.unplot(2, 4)\n    }\n    \n}\n\nfunction showRichtung() {\n    if (richtung > 0) {\n        if (richtung > r2) {\n            led.plot(2, 2)\n            led.plot(3, 2)\n            led.plot(4, 2)\n        } else {\n            led.unplot(4, 2)\n            led.plot(3, 2)\n        }\n        \n    } else if (richtung < 0) {\n        if (richtung < -1 * r2) {\n            led.plot(0, 2)\n            led.plot(1, 2)\n            led.plot(2, 2)\n        } else {\n            led.plot(1, 2)\n            led.unplot(0, 2)\n        }\n        \n    } else if (richtung == 0) {\n        led.unplot(0, 2)\n        led.unplot(1, 2)\n        led.plot(2, 2)\n        led.unplot(3, 2)\n        led.unplot(4, 2)\n    }\n    \n}\n\n//  Init\n//  =========================\nlet richtungRoh = 0\nlet richtungOld = 0\nlet richtungAbs = 0\nlet richtungFkt = 2\n// richtungDir = 0\nlet richtung = 0\nlet licht_on = 0\nlet speedRoh = 0\nlet speedOld = 0\nlet speedAbs = 0\nlet speedFaktor = 2\nlet remCtrl = 0\nlet speed = 0\nlet fahren = 0\nlet trigger = 0\nlet hyst = 5\nlet s0 = 10\nlet s2 = 80\nlet r0 = 10\nlet r2 = 80\nbasic.showLeds(`\n    . . . . .\n    . # # # .\n    . # . # .\n    . # # # .\n    . . . . .\n    `)\nbasic.pause(1000)\nbasic.clearScreen()\n//  Time Loop 1s\n//  =====================================\nloops.everyInterval(100, function on_every_interval() {\n    \n    if (trigger == 1) {\n        datalogger.log(datalogger.createCV(\"speedRoh\", speedRoh), datalogger.createCV(\"speed\", speed), datalogger.createCV(\"speedAbs\", speedAbs), datalogger.createCV(\"speedOld\", speedOld), datalogger.createCV(\"trigger\", trigger), datalogger.createCV(\"richtung\", richtung), datalogger.createCV(\"richtungRoh\", richtungRoh))\n        trigger = 0\n    }\n    \n})\n//  Main Loop\n//  =====================================\nbasic.forever(function on_forever() {\n    \n    if (fahren == 1) {\n        set_led_fahren(1)\n        setSpeed()\n        showSpeed()\n        setRichtung()\n        showRichtung()\n        sendData()\n    } else {\n        showSpeed()\n        showRichtung()\n        set_led_stop(1)\n    }\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":6873,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ne\":"],[-1," \"*\",\n        \"datalogger\":"],[0," \"*\""]],"start1":142,"start2":142,"length1":35,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":230,"start2":230,"length1":108,"length2":44}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchfÃ¼hren; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"},{"type":"added","filename":"main.py","value":"# Programm name:    zip64-car-steuerung\n# Car Steuerung Sender mit Rotation\n# V1 von car-steuerung-py kopiert   11.11.2024\n\n# LED Anzeigen:\n# Remote    0,0\n# Speed     2,0 - 2,4\n# richtung  0,2 - 0,4\n# licht     4,4\n# on        4,0\n\n# Buttons\n# =====================================\n\n# A: on/off, on: LED 4,0\ndef on_button_pressed_a():\n    global fahren, speed, richtung, trigger\n    if fahren == 0:\n        fahren = 1\n        set_led_fahren(1)\n        #led.plot(0, 0)\n        music.play(music.tone_playable(262, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n    else:\n        fahren = 0\n        speed = 0\n        richtung = 0\n        trigger = 1\n        sendData()\n        set_led_fahren(0)\n        # led.unplot(0, 0)\n        music.play(music.create_sound_expression(WaveShape.SQUARE,\n                1600,\n                1,\n                255,\n                0,\n                1000,\n                SoundExpressionEffect.NONE,\n                InterpolationCurve.CURVE),\n            music.PlaybackMode.UNTIL_DONE)\n    radio.send_value(\"fahren\", fahren)\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# B: Licht on/off, on: LED xy44\ndef on_button_pressed_b():\n    global licht_on\n    if licht_on == 0:\n        licht_on = 1\n        set_led_licht(1)\n        # led.plot(4, 0)\n    else:\n        licht_on = 0\n        sendData()\n        set_led_licht(0)\n        #led.unplot(4, 0)\n    radio.send_value(\"licht_on\", licht_on)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\n# Funktionen\n# ===================================\n\n# Leds ein/aus\n# -------------------\n# remotControl\ndef set_led_remote(on):\n    pos = (0,0)\n    if on:\n        led.plot(pos[0],pos[1])\n    else:\n        led.unplot(pos[0],pos[1])\n\n# fahren\ndef set_led_fahren(on):\n    pos = (4,0)\n    if on:\n        led.plot(pos[0],pos[1])\n    else:\n        led.unplot(pos[0],pos[1])\n\n# stop\ndef set_led_stop(on):\n    pos = (2,2)\n    if on:\n        led.plot(pos[0],pos[1])\n    else:\n        led.unplot(pos[0],pos[1])\n\n# licht\ndef set_led_licht(on):\n    pos = (4,4)\n    if on:\n        led.plot(pos[0],pos[1])\n    else:\n        led.unplot(pos[0],pos[1])\n\n\n# Daten Senden\ndef sendData():\n    global trigger, speed, richtung, licht_on\n    if trigger == 1:\n        #serial.write_value(\"speed\", speed)\n        #serial.write_value(\"richtung\", richtung)\n        radio.send_number(1)\n        radio.set_transmit_serial_number(True)\n        radio.send_value(\"speed\", speed)\n        radio.send_value(\"richtung\", richtung)\n        radio.send_value(\"licht_on\", licht_on)\n        trigger = 0\n        \n# Daten Empfangen\ndef on_received_value(name, value):\n    global remCtrl\n    music.play(music.tone_playable(Note.C, music.beat(BeatFraction.WHOLE)), music.PlaybackMode.UNTIL_DONE)\n    serial.write_value(\"daten empfangen: \"+name, value)\n    if name == \"remCtrl\":\n        remCtrl = value\n    if remCtrl:\n        set_led_remote(1)\n        #led.plot(4, 0)\n    else:\n        set_led_remote(0)\n        #led.unplot(4, 0)\nradio.on_received_value(on_received_value)\n\ndef setSpeed():\n    global speedRoh, speed, speedAbs, trigger, speedOld, hyst\n    speedRoh = input.rotation(Rotation.PITCH) * -1\n    if speedRoh > 0:\n        speedDir = 1\n    else:\n        speedDir = -1\n    #speed = Math.constrain(abs(speedRoh) - s0, 0, 100)\n    #speed = min(100, speed / 2 * 10) * speedDir\n    speed = min (100, abs(speedRoh * speedFaktor)) * speedDir\n    speedAbs = abs(speed)\n    if abs(speedAbs - speedOld) > hyst:\n        trigger = 1\n        #serial.write_value(\"speedAbs\", speedAbs)\n        #serial.write_value(\"speedOld\", speedOld)\n        speedOld = speedAbs\n\ndef setRichtung():\n    global richtungRoh, richtung, richtungAbs, trigger, richtungOld\n    richtungRoh = input.rotation(Rotation.ROLL)\n    if richtungRoh > 0:\n        richtungDir = 1\n    else:\n        richtungDir = -1\n    #richtung = Math.constrain(abs(richtungRoh) - r0, 0, 100)\n    #richtung = min(100, richtung / 2 * 10) * richtungDir\n    richtung = min (100, abs(richtungRoh * richtungFkt)) * richtungDir\n    richtungAbs = abs(richtung)\n    if abs(richtungAbs - richtungOld) > hyst:\n        trigger = 1\n        richtungOld = richtungAbs\n\ndef showSpeed():\n    if speed > 0:\n        if speed > s2:\n            led.plot(2, 0)\n            led.plot(2, 1)\n            led.plot(2, 2)\n        else:\n            led.unplot(2, 0)\n            led.plot(2, 1)\n    elif speed < 0:\n        if speed < -1 * s2:\n            led.plot(2, 2)\n            led.plot(2, 3)\n            led.plot(2, 4)\n        else:\n            led.plot(2, 3)\n            led.unplot(2, 4)\n    elif speed == 0:\n        led.unplot(2, 0)\n        led.unplot(2, 1)\n        led.plot(2, 2)\n        led.unplot(2, 3)\n        led.unplot(2, 4)\n\ndef showRichtung():\n    if richtung > 0:\n        if richtung > r2:\n            led.plot(2, 2)\n            led.plot(3, 2)\n            led.plot(4, 2)\n        else:\n            led.unplot(4, 2)\n            led.plot(3, 2)\n    elif richtung < 0:\n        if richtung < -1 * r2:\n            led.plot(0, 2)\n            led.plot(1, 2)\n            led.plot(2, 2)\n        else:\n            led.plot(1, 2)\n            led.unplot(0, 2)\n    elif richtung == 0:\n        led.unplot(0, 2)\n        led.unplot(1, 2)\n        led.plot(2, 2)\n        led.unplot(3, 2)\n        led.unplot(4, 2)\n\n# Init\n# =========================\nrichtungRoh = 0\nrichtungOld = 0\nrichtungAbs = 0\nrichtungFkt = 2\n#richtungDir = 0\nrichtung = 0\nlicht_on = 0\nspeedRoh = 0\nspeedOld = 0\nspeedAbs = 0\nspeedFaktor = 2\nremCtrl = 0\nspeed = 0\nfahren = 0\ntrigger = 0\nhyst = 5\ns0 = 10\ns2 = 80\nr0 = 10\nr2 = 80\nbasic.show_leds(\"\"\"\n    . . . . .\n    . # # # .\n    . # . # .\n    . # # # .\n    . . . . .\n    \"\"\")\nbasic.pause(1000)\nbasic.clear_screen()\n\n# Time Loop 1s\n# =====================================\n\ndef on_every_interval():\n    global trigger\n    if trigger == 1:\n        datalogger.log(datalogger.create_cv(\"speedRoh\", speedRoh),\n            datalogger.create_cv(\"speed\", speed),\n            datalogger.create_cv(\"speedAbs\", speedAbs),\n            datalogger.create_cv(\"speedOld\", speedOld),\n            datalogger.create_cv(\"trigger\", trigger),\n            datalogger.create_cv(\"richtung\", richtung),\n            datalogger.create_cv(\"richtungRoh\", richtungRoh))\n        trigger = 0\nloops.every_interval(100, on_every_interval)\n\n# Main Loop\n# =====================================\ndef on_forever():\n    global trigger\n    if fahren == 1:\n        set_led_fahren(1)\n        setSpeed()\n        showSpeed()\n        setRichtung()\n        showRichtung()\n        sendData()\n    else:\n        showSpeed()\n        showRichtung()\n        set_led_stop(1)\n        \nbasic.forever(on_forever)"}]}],"snapshots":[{"timestamp":1731331346514,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"zip64-car-steuerung\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1731331581121}